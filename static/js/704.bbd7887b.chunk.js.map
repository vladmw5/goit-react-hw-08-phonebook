{"version":3,"file":"static/js/704.bbd7887b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/Phonebook/Phonebook.module.css?3a02","components/Phonebook/Phonebook.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","redux/contacts/contacts-selectors.js","redux/filter/filterSelectors.js","webpack://react-homework-template/./src/views/PhonebookView/PhonebookView.module.css?50e9","views/PhonebookView/PhonebookView.jsx","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","utils/capitalize.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\",\"header\":\"Section_header__mpTaY\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\nconst Section = ({ title, children }) => {\n  return (\n    <section className={s.section}>\n      <h2 className={s.header}>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Phonebook_form__J23fu\",\"label\":\"Phonebook_label__Qzztg\",\"input\":\"Phonebook_input__8yiEQ\",\"addBtn\":\"Phonebook_addBtn__1oJhl\"};","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport s from './Phonebook.module.css';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\nconst Phonebook = ({ addContact }) => {\n  const [name, setName] = useState(INITIAL_STATE.name);\n  const [number, setNumber] = useState(INITIAL_STATE.number);\n\n  const handleContactSubmit = event => {\n    event.preventDefault();\n    addContact({ name, number });\n    resetFields();\n  };\n\n  const handleInputChange = event => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        break;\n\n      case 'number':\n        setNumber(event.target.value);\n        break;\n\n      default:\n        throw new Error('Unknown error happened at HandleInputChange');\n    }\n  };\n\n  const resetFields = () => {\n    setName(INITIAL_STATE.name);\n    setNumber(INITIAL_STATE.number);\n  };\n\n  const nameInputId = nanoid();\n  const phoneNumberInputId = nanoid();\n  return (\n    <form className={s.form} onSubmit={handleContactSubmit}>\n      <label className={s.label} htmlFor={nameInputId}>\n        Name\n      </label>\n      <input\n        className={s.input}\n        id={nameInputId}\n        value={name}\n        onChange={handleInputChange}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <label className={s.label} htmlFor={phoneNumberInputId}>\n        Phone Number\n      </label>\n      <input\n        className={s.input}\n        id={phoneNumberInputId}\n        value={number}\n        onChange={handleInputChange}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button className={`Button ${s.addBtn}`} type=\"submit\">\n        Add Contact\n      </button>\n    </form>\n  );\n};\n\nPhonebook.propTypes = {\n  addContact: PropTypes.func.isRequired,\n};\n\nexport default Phonebook;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Filter_wrapper__9Ksqy\",\"input\":\"Filter_input__N7T3z\"};","import PropTypes from 'prop-types';\n\nimport s from './Filter.module.css';\n\nconst Filter = ({ name, inputHandler }) => {\n  return (\n    <div className={s.wrapper}>\n      <p>Find Contacts by Name</p>\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"filter\"\n        value={name}\n        onChange={inputHandler}\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  name: PropTypes.string.isRequired,\n  inputHandler: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Contact_item__j+P5X\",\"name\":\"Contact_name__xbxVU\",\"tel\":\"Contact_tel__F8aKt\",\"button\":\"Contact_button__F+kJb\"};","import PropTypes from 'prop-types';\nimport s from './Contact.module.css';\n\nconst Contact = ({ name, number, id, deleteBtnHandler }) => {\n  return (\n    <li className={s.item}>\n      <div>\n        <span className={s.name}>{`${name}: `}</span>\n        <span className={s.tel}>{`${number} `}</span>\n      </div>\n      <div>\n        <button\n          className={s.button}\n          type=\"button\"\n          data-id={id}\n          onClick={deleteBtnHandler}\n        >\n          Delete Contact\n        </button>\n      </div>\n    </li>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  deleteBtnHandler: PropTypes.func.isRequired,\n};\n\nexport default Contact;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import PropTypes from 'prop-types';\nimport Contact from 'components/Contact';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, deleteBtnHandler }) => {\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ name, id, number }) => (\n        <Contact\n          key={id}\n          name={name}\n          number={number}\n          id={id}\n          deleteBtnHandler={deleteBtnHandler}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  deleteBtnHandler: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","export const contacts = state => state.contacts.contacts;\nexport const isFetching = state => state.contacts.isFetching;\n\nconst contactSelectors = {\n  contacts,\n  isFetching,\n};\n\nexport default contactSelectors;\n","export const filter = state => state.filter;\n\nconst filterSelectors = { filter };\n\nexport default filterSelectors;\n","// extracted by mini-css-extract-plugin\nexport default {\"view\":\"PhonebookView_view__xoySD\"};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux/es/exports';\nimport { toast } from 'react-toastify';\n\nimport Section from 'components/Section';\nimport Phonebook from 'components/Phonebook';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport Loader from 'components/Loader';\n\nimport contactSelectors from 'redux/contacts/contacts-selectors';\nimport contactOperations from 'redux/contacts/contacts-operations';\nimport filterSelectors from 'redux/filter/filterSelectors';\nimport filterActions from 'redux/filter/filterActions';\n\nimport capitalize from 'utils/capitalize';\nimport s from './PhonebookView.module.css';\n\nconst PhoneBookView = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactSelectors.contacts);\n  const isFetching = useSelector(contactSelectors.isFetching);\n  const filter = useSelector(filterSelectors.filter);\n\n  useEffect(() => {\n    dispatch(contactOperations.getAllContacts());\n  }, [dispatch]);\n\n  const doesAlreadyExist = newContact => {\n    for (const { name } of contacts) {\n      if (name === newContact.name) {\n        return name;\n      }\n    }\n    return false;\n  };\n\n  const addContact = newContact => {\n    if (doesAlreadyExist(newContact)) {\n      toast.error(\n        `${capitalize(\n          newContact.name\n        )}'s contact already exists. Please, next time be more attentive to what you are trying to add`\n      );\n      return;\n    }\n    dispatch(contactOperations.makeNewContact(newContact));\n  };\n\n  const handleFilterInput = event => {\n    dispatch(filterActions.changeFilter(event.target.value));\n  };\n\n  const filterContacts = contacts => {\n    return contacts?.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const deleteContact = targetId => {\n    dispatch(contactOperations.deleteContact(targetId));\n  };\n\n  const handleDeleteContactBtnClick = event => {\n    deleteContact(event.target.dataset.id);\n  };\n\n  return (\n    <main className={s.view}>\n      <div className={s.wrapper}>\n        <Section title=\"Phonebook\">\n          <Phonebook addContact={addContact} />\n        </Section>\n        <Section title=\"Contacts\">\n          {contacts && (\n            <Filter name={filter} inputHandler={handleFilterInput} />\n          )}\n          {contacts && (\n            <ContactList\n              contacts={filterContacts(contacts)}\n              deleteBtnHandler={handleDeleteContactBtnClick}\n            />\n          )}\n          {isFetching && <Loader />}\n        </Section>\n      </div>\n    </main>\n  );\n};\n\nexport default PhoneBookView;\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function capitalize(str) {\n  return str\n    .split(' ')\n    .map(word => `${word[0].toUpperCase()}${word.slice(1)}`)\n    .join(' ');\n}\n"],"names":["title","children","className","s","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","INITIAL_STATE","addContact","useState","name","setName","number","setNumber","handleInputChange","event","target","value","Error","resetFields","nameInputId","phoneNumberInputId","onSubmit","preventDefault","htmlFor","onChange","type","pattern","required","inputHandler","deleteBtnHandler","onClick","contacts","map","state","isFetching","filter","dispatch","useDispatch","useSelector","contactSelectors","filterSelectors","useEffect","contactOperations","doesAlreadyExist","newContact","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","toast","split","word","slice","join","filterActions","toLowerCase","includes","filterContacts","targetId","dataset","Loader"],"sourceRoot":""}